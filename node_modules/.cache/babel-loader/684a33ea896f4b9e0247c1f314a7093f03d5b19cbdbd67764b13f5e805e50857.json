{"ast":null,"code":"var _jsxFileName = \"/Users/liet/Documents/GitHub/ipfsObjectAnalyzer/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCIDChange = event => {\n      this.setState({\n        cid: event.target.value\n      });\n    };\n    this.handleGatewayChange = (index, event) => {\n      const newGateways = this.state.gateways.map((gateway, idx) => idx === index ? event.target.value : gateway);\n      this.setState({\n        gateways: newGateways\n      });\n    };\n    this.benchmark = async () => {\n      this.setState({\n        loading: true,\n        error: null\n      });\n      const results = [];\n      try {\n        for (const gateway of this.state.gateways) {\n          const start = performance.now();\n          await fetch(`${gateway}/ipfs/${this.state.cid}`);\n          const end = performance.now();\n          const duration = end - start;\n          results.push({\n            gateway,\n            duration\n          });\n        }\n      } catch (error) {\n        this.setState({\n          error: error.message\n        });\n      } finally {\n        this.setState({\n          results,\n          loading: false\n        });\n      }\n    };\n    this.state = {\n      cid: '',\n      gateways: ['https://ipfs.io', 'https://cloudflare-ipfs.com', 'https://leto.gg/ipfs/'],\n      results: [],\n      loading: false,\n      error: null\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"IPFS CID Benchmarking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: this.state.cid,\n        onChange: this.handleCIDChange,\n        placeholder: \"Content Identifier\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), this.state.gateways.map((gateway, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: gateway,\n        onChange: e => this.handleGatewayChange(index, e)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.benchmark,\n        children: \"Benchmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), this.state.loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 40\n      }, this), this.state.error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", this.state.error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 38\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.results.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [result.gateway, \": \", result.duration, \"ms\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n//Start adding more gateways to retrieve from (Fleek,Lighthouse.Storage)\n\n//Move infra files out of this React App for the UI!\n\n//Add gateway that you will race for retrievability\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 71,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"names":["React","Component","ReactDOM","jsxDEV","_jsxDEV","App","constructor","props","handleCIDChange","event","setState","cid","target","value","handleGatewayChange","index","newGateways","state","gateways","map","gateway","idx","benchmark","loading","error","results","start","performance","now","fetch","end","duration","push","message","render","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","e","onClick","result","document","getElementById"],"sources":["/Users/liet/Documents/GitHub/ipfsObjectAnalyzer/src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cid: '',\n            gateways: ['https://ipfs.io', 'https://cloudflare-ipfs.com', 'https://leto.gg/ipfs/'],\n            results: [],\n            loading: false,\n            error: null\n        };\n    }\n\n    handleCIDChange = (event) => {\n        this.setState({ cid: event.target.value });\n    }\n\n    handleGatewayChange = (index, event) => {\n        const newGateways = this.state.gateways.map((gateway, idx) => idx === index ? event.target.value : gateway);\n        this.setState({ gateways: newGateways });\n    }\n\n    benchmark = async () => {\n        this.setState({ loading: true, error: null });\n        const results = [];\n        try {\n            for (const gateway of this.state.gateways) {\n                const start = performance.now();\n                await fetch(`${gateway}/ipfs/${this.state.cid}`);\n                const end = performance.now();\n                const duration = end - start;\n                results.push({ gateway, duration });\n            }\n        } catch (error) {\n            this.setState({ error: error.message });\n        } finally {\n            this.setState({ results, loading: false });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>IPFS CID Benchmarking</h1>\n                <input type=\"text\" value={this.state.cid} onChange={this.handleCIDChange} placeholder=\"Content Identifier\" />\n                {this.state.gateways.map((gateway, index) => (\n                    <input key={index} type=\"text\" value={gateway} onChange={(e) => this.handleGatewayChange(index, e)} />\n                ))}\n                <button onClick={this.benchmark}>Benchmark</button>\n                {this.state.loading && <p>Loading...</p>}\n                {this.state.error && <p>Error: {this.state.error}</p>}\n                <ul>\n                    {this.state.results.map((result, index) => (\n                        <li key={index}>{result.gateway}: {result.duration}ms</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\n//Start adding more gateways to retrieve from (Fleek,Lighthouse.Storage)\n\n//Move infra files out of this React App for the UI!\n\n//Add gateway that you will race for retrievability\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}